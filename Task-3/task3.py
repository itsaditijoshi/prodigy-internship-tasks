# -*- coding: utf-8 -*-
"""task3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lCramb4YsqRibfn8RH-SBpdidWZqEByd
"""

import zipfile

with zipfile.ZipFile("data.zip", 'r') as zip_ref:
    zip_ref.extractall("dataset")

import os
import cv2
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report
import matplotlib.pyplot as plt

def load_images_from_folder(folder_path, label, img_size=(64, 64), limit=None):
    data = []
    count = 0
    for filename in os.listdir(folder_path):
        if filename.endswith('.jpg') or filename.endswith('.png'):
            try:
                img = cv2.imread(os.path.join(folder_path, filename))
                img = cv2.resize(img, img_size)
                img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
                data.append((img.flatten(), label))
                count += 1
                if limit and count >= limit:
                    break
            except:
                continue
    return data

import os

# List all folders inside "dataset"
print(os.listdir("dataset"))

# Update paths based on where you extracted
cat_path = 'dataset/data/cats'
dog_path = 'dataset/data/dogs'

# Load images
cat_data = load_images_from_folder(cat_path, label=0, limit=100)
dog_data = load_images_from_folder(dog_path, label=1, limit=100)

# Combine
all_data = cat_data + dog_data
X, y = zip(*all_data)
X = np.array(X)
y = np.array(y)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = SVC(kernel='linear')
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

for i in range(1):
    img = X_test[i].reshape(64, 64)
    plt.imshow(img, cmap='gray')
    plt.title(f"Predicted: {'Dog' if y_pred[i] == 1 else 'Cat'}")
    plt.axis('off')
    plt.show()